name: Test
on: [ push, pull_request ]
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup Rust toolchain
      run: rustup show && rustup update
    - name: Install GUI dependencies
      run: sudo apt-get install -y libxcb-shape0-dev libxcb-xfixes0-dev libx11-dev libxkbcommon-dev libfontconfig-dev libxext-dev libxft-dev libxinerama-dev libxcursor-dev libxrender-dev libxfixes-dev
    - name: Build client & server
      run: cargo build --workspace --features=admin,sqlite --bin mdb_client --bin mdb_server
    - name: cargo test
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --workspace --features=admin,admin-gui,sqlite

  cross:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ windows-latest, macos-latest ]
    steps:
      - uses: actions/checkout@v4
      - name: Build client & server
        run: cargo build --workspace --features=admin,sqlite --bin mdb_client --bin mdb_server

  #postgres:
  #  runs-on: ubuntu-latest
  #  services:
  #    postgres:
  #      image: ghcr.io/malwaredb/docker:main
  #      env:
  #        POSTGRES_PASSWORD: malwaredbtesting
  #        POSTGRES_HOST_AUTH_METHOD: trust
  #        POSTGRES_DB: malwaredbtesting
  #        POSTGRES_USER: malwaredbtesting
  #      ports:
  #        - 5432:5432
  #      options: >-
  #        --health-cmd pg_isready
  #        --health-interval 10s
  #        --health-timeout 5s
  #        --health-retries 5
  #        -h 0.0.0.0
  #  steps:
  #    - uses: actions/checkout@v4
      #- name: Create database
      #  run: |
      #    PGPASSWORD=malwaredbtesting psql -h 127.0.0.1 -p ${{ job.services.postgres.ports[5432] }} -tc "create user malwaredbtesting with password 'malwaredbtesting';"
      #    PGPASSWORD=malwaredbtesting psql -h 127.0.0.1 -p ${{ job.services.postgres.ports[5432] }} -tc "create database malwaredbtesting owner malwaredbtesting;"
  #    - name: Load extensions
  #      run: |
  #        PGPASSWORD=malwaredbtesting psql -U malwaredbtesting -h 127.0.0.1 -p ${{ job.services.postgres.ports[5432] }} -d malwaredbtesting -tc "CREATE OR REPLACE FUNCTION fuzzy_hash_compare(TEXT, TEXT) RETURNS INTEGER AS 'ssdeep_psql.so', 'pg_fuzzy_hash_compare' LANGUAGE 'c';"
  #        PGPASSWORD=malwaredbtesting psql -U malwaredbtesting -h 127.0.0.1 -p ${{ job.services.postgres.ports[5432] }} -d malwaredbtesting -tc "CREATE OR REPLACE FUNCTION tlsh_compare(TEXT, TEXT) RETURNS INTEGER AS 'tlsh_psql.so', 'pg_tlsh_compare' LANGUAGE 'c';"
  #        PGPASSWORD=malwaredbtesting psql -U malwaredbtesting -h 127.0.0.1 -p ${{ job.services.postgres.ports[5432] }} -d malwaredbtesting -tc "CREATE OR REPLACE FUNCTION sdhash_compare(TEXT, TEXT) RETURNS INTEGER AS 'sdhash_psql.so', 'pg_sdhash_compare' LANGUAGE 'c';"
  #        PGPASSWORD=malwaredbtesting psql -U malwaredbtesting -h 127.0.0.1 -p ${{ job.services.postgres.ports[5432] }} -d malwaredbtesting -tc "CREATE OR REPLACE FUNCTION lzjd_compare(TEXT, TEXT) RETURNS INTEGER AS 'lzjd_psql.so', 'pg_lzjd_compare' LANGUAGE 'c';"
  #    - name: MalwareDB postgres test
  #      run: |
  #        PG_PORT=${{ job.services.postgres.ports[5432] }} cargo test db --workspace -- --ignored
