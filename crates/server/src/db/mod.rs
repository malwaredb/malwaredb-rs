//!
//! Postgres is the database used by MalwareDB.
//! However, SQLite will be used for unit testing. This option can be allowed by using the `sqlite`
//! feature flag. When using SQLite, any similarity functions must be calculated by MalwareDB.

#![allow(unused)]

mod pg;

#[cfg(any(test, feature = "sqlite"))]
mod sqlite;

use crate::db::pg::Postgres;

#[cfg(any(test, feature = "sqlite"))]
use crate::db::sqlite::Sqlite;

use anyhow::{bail, Result};

#[derive(Debug)]
pub enum DatabaseType {
    Postgres(Postgres),
    #[cfg(any(test, feature = "sqlite"))]
    SQLite(Sqlite),
}

impl DatabaseType {
    pub fn from_string(arg: &str) -> Result<Self> {
        #[cfg(any(test, feature = "sqlite"))]
        if arg.starts_with("file:") {
            let new_conn_str = arg.trim_start_matches("file:");
            return Ok(DatabaseType::SQLite(Sqlite::new(new_conn_str)?));
        }

        if arg.starts_with("postgres") {
            let new_conn_str = arg.trim_start_matches("postgres");
            return Ok(DatabaseType::Postgres(Postgres::new(new_conn_str)?));
        }

        bail!("unknown database type {arg}")
    }
}

trait DatabaseConnection {}
