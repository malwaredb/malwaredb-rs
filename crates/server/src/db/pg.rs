use super::{hash_password, random_bytes_api_key, DatabaseConnection};

use std::fmt::{Debug, Display, Formatter};

use anyhow::{bail, Context, Result};
use postgres::{Client, NoTls};

const PG_SQL: &str = include_str!("malwaredb_pg.sql");

pub struct Postgres {
    client: Client,
    connection_string: String,
}

impl Postgres {
    pub fn new(connection_string: &str) -> Result<Self> {
        let mut client = Client::connect(connection_string, NoTls)?;

        if let Some(row) = client
            .query(
                "\
                SELECT EXISTS (
            SELECT FROM 
                information_schema.tables 
            WHERE 
                table_schema LIKE 'public' AND 
                table_type LIKE 'BASE TABLE' AND
                table_name = 'file'
            );\
        ",
                &[],
            )?
            .get(0)
        {
            let exists: bool = row.get(0);
            if !exists {
                println!("Tables don't seem to exists, creating.");
                client
                    .batch_execute(PG_SQL)
                    .context("failed to create postgres tables")?;
                println!("Tables created.");
            } else {
                println!("Tables already present.");
            }
        } else {
            bail!("Failed to query postgres for file table existence");
        }

        Ok(Self {
            client,
            connection_string: connection_string.to_string(),
        })
    }
}

impl Display for Postgres {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        write!(f, "Postgres client")
    }
}

impl Debug for Postgres {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        write!(f, "Postgres client")
    }
}

impl DatabaseConnection for Postgres {
    fn authenticate(&mut self, uname: &str, password: &str) -> Result<String> {
        let password = hash_password(password)?;
        let result = self.client.query(
            "select apikey from person where uname = $1 and password = $2",
            &[&uname, &password],
        )?;

        if result.is_empty() {
            bail!("Unauthorized");
        }
        if result.len() == 1 {
            if let Some(row) = result.get(0) {
                let key: &str = row.get(0);
                return Ok(key.to_string());
            }
        } else if result.len() > 1 {
            eprintln!("Failure: more than one result for API key for username {uname}.");
            bail!("System error");
        }

        let apikey = random_bytes_api_key();
        self.client
            .execute("update person set apikey = {} where uname = $1", &[&apikey])?;

        Ok(apikey)
    }

    fn create_user(
        &mut self,
        uname: &str,
        fname: &str,
        lname: &str,
        password: &str,
        email: &str,
    ) -> Result<u32> {
        todo!()
    }
}
