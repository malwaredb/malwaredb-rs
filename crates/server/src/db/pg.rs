use std::fmt::{Debug, Display, Formatter};

use anyhow::{bail, Context, Result};
use postgres::{Client, NoTls};

const PG_SQL: &str = include_str!("malwaredb_pg.sql");

pub struct Postgres {
    client: Client,
    connection_string: String,
}

impl Postgres {
    pub fn new(connection_string: &str) -> Result<Self> {
        let mut client = Client::connect(connection_string, NoTls)?;

        if let Some(row) = client
            .query(
                "\
                SELECT EXISTS (
            SELECT FROM 
                information_schema.tables 
            WHERE 
                table_schema LIKE 'public' AND 
                table_type LIKE 'BASE TABLE' AND
                table_name = 'file'
            );\
        ",
                &[],
            )?
            .get(0)
        {
            let exists: bool = row.get(0);
            if !exists {
                println!("Tables don't seem to exists, creating.");
                client
                    .batch_execute(PG_SQL)
                    .context("failed to create postgres tables")?;
                println!("Tables created.");
            } else {
                println!("Tables already present.");
            }
        } else {
            bail!("Failed to query postgres for file table existence");
        }

        Ok(Self {
            client,
            connection_string: connection_string.to_string(),
        })
    }
}

impl Display for Postgres {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        write!(f, "Postgres client")
    }
}

impl Debug for Postgres {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        write!(f, "Postgres client")
    }
}
