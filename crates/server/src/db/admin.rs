use std::fmt::{Display, Formatter};

#[derive(Clone, Debug)]
pub struct User {
    pub id: i32,
    pub email: String,
    pub uname: String,
    pub has_password: bool,
    pub has_api_key: bool,
}

impl Display for User {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let has_password = {
            if self.has_password {
                "password set"
            } else {
                "no password"
            }
        };
        let has_api_key = {
            if self.has_api_key {
                "API key set"
            } else {
                "no API key"
            }
        };
        write!(
            f,
            "{}: {} <{}> {has_password}, {has_api_key}",
            self.id, self.uname, self.email
        )
    }
}

#[derive(Clone, Debug)]
pub struct Group {
    pub id: i32,
    pub name: String,
    pub description: String,
    pub parent: Option<String>,
}

impl Display for Group {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let parent = if let Some(p) = &self.parent {
            format!("Parent: {p}")
        } else {
            "".into()
        };
        write!(
            f,
            "{}: {} {parent} -- {}",
            self.id, self.name, self.description
        )
    }
}
