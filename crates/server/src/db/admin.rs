use std::fmt::{Display, Formatter};

#[derive(Clone, Debug)]
pub struct User {
    pub id: i32,
    pub email: String,
    pub uname: String,
    pub org: Option<String>,
    pub phone: Option<String>,
    pub has_password: bool,
    pub has_api_key: bool,
}

impl Display for User {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let has_password = {
            if self.has_password {
                "password set"
            } else {
                "no password"
            }
        };
        let has_api_key = {
            if self.has_api_key {
                "API key set"
            } else {
                "no API key"
            }
        };
        let org = {
            if let Some(org) = &self.org {
                format!(" ({org}) ")
            } else {
                String::new()
            }
        };
        let phone = {
            if let Some(ph) = &self.phone {
                format!(" {ph} ")
            } else {
                String::new()
            }
        };
        write!(
            f,
            "{}: {} <{}>,{phone}{org}{has_password}, {has_api_key}",
            self.id, self.uname, self.email
        )
    }
}

#[derive(Clone, Debug)]
pub struct Group {
    pub id: i32,
    pub name: String,
    pub description: String,
    pub parent: Option<String>,
    pub members: Option<Vec<User>>,
    pub sources: Option<Vec<Source>>,
    pub files: u32,
}

impl Display for Group {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let parent = if let Some(p) = &self.parent {
            format!("Parent: {p}")
        } else {
            "".into()
        };
        let sources_label = if let Some(sources) = &self.sources {
            match sources.len() {
                0 => "no sources".into(),
                1 => "one source".into(),
                x => format!("{x} sources:"),
            }
        } else {
            String::new()
        };
        let members_label = if let Some(members) = &self.members {
            match members.len() {
                0 => "no members".into(),
                1 => "one member".into(),
                x => format!("{x} members:"),
            }
        } else {
            String::new()
        };
        writeln!(
            f,
            "{}: {} {parent} {} files -- {} {members_label} {sources_label}",
            self.id, self.name, self.files, self.description
        )?;
        if let Some(members_list) = &self.members {
            writeln!(f, "Members:")?;
            for user in members_list {
                writeln!(f, "\t{user}")?;
            }
        }
        if let Some(sources) = &self.sources {
            writeln!(f, "Sources:")?;
            for source in sources {
                writeln!(f, "\t{source}")?;
            }
        }
        Ok(())
    }
}

#[derive(Clone, Debug)]
pub struct Source {
    pub id: i32,
    pub name: String,
    pub description: Option<String>,
    pub url: Option<String>,
    pub date: chrono::DateTime<chrono::Local>,
    pub files: u32,
    pub groups: u32,
}

impl Display for Source {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        write!(f, "{}: {}", self.id, self.name)?;
        if let Some(url) = &self.url {
            write!(f, " {url}")?;
        }
        if let Some(desc) = &self.description {
            write!(f, " {desc}")?;
        }
        write!(
            f,
            " {} files and {} groups from {}",
            self.files, self.groups, self.date
        )?;
        Ok(())
    }
}
