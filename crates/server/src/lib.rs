pub mod db;
pub mod http;
pub mod utils;

use api::ServerInfo;
//use db::DatabaseConnection;

use std::net::{IpAddr, SocketAddr};
use std::str::FromStr;
use std::time::{Duration, SystemTime};

use anyhow::Result;
use duration_string::DurationString;
use zeroize::Zeroizing;

/// MDB version
pub const MDB_VERSION: &str = env!("CARGO_PKG_VERSION");

pub struct State {
    /// The port which will be used to listen for connections.
    pub port: u16,

    /// The directory to store malware samples, if we're keeping them.
    pub directory: Option<String>,

    /// The IP to use for listening for connections
    pub ip: IpAddr,

    /// Database connection string
    pub database_connection: Zeroizing<String>,

    /// Handle to the database connection
    pub db_type: db::DatabaseType,

    /// Start time of the server
    pub started: SystemTime,
}

impl State {
    pub async fn new(
        port: u16,
        directory: Option<String>,
        ip: IpAddr,
        db_string: &str,
    ) -> Result<Self> {
        Ok(Self {
            port,
            directory,
            ip,
            database_connection: Zeroizing::new(db_string.into()),
            db_type: db::DatabaseType::from_string(db_string).await?,
            started: SystemTime::now(),
        })
    }

    pub fn since(&self) -> Duration {
        let now = SystemTime::now();
        now.duration_since(self.started).unwrap()
    }

    pub async fn get_info(&self) -> Result<ServerInfo> {
        let db_info = self.db_type.db_info().await?;

        let os_name = if cfg!(target_os = "linux") {
            "Linux"
        } else if cfg!(target_os = "macos") {
            "macOS"
        } else if cfg!(target_os = "windows") {
            "Windows"
        } else if cfg!(target_os = "freebsd") {
            "FreeBSD"
        } else if cfg!(target_os = "openbsd") {
            "OpenBSD"
        } else if cfg!(target_os = "netbsd") {
            "NetBSD"
        } else if cfg!(target_os = "wasi") {
            "WebAssembly WASI"
        } else {
            "unknown"
        };

        let mem_size = if cfg!(target_family = "unix") {
            if let Ok(statm) = std::fs::read_to_string("/proc/self/statm") {
                let mut parts = statm.split(' ');
                if let Some(total_memory) = parts.next() {
                    if let Ok(memory_integer) = u64::from_str(total_memory) {
                        humansize::SizeFormatter::new(memory_integer, humansize::BINARY).to_string()
                    } else {
                        "".into()
                    }
                } else {
                    "".into()
                }
            } else {
                "".into()
            }
        } else {
            "".into()
        };

        Ok(ServerInfo {
            os_name: os_name.into(),
            os_version: "".to_string(),
            memory_used: mem_size,
            num_samples: db_info.num_files,
            num_users: db_info.num_users,
            uptime: DurationString::from(self.since()),
            mdb_version: MDB_VERSION.into(),
            db_version: db_info.version,
            db_size: db_info.size,
        })
    }

    pub async fn serve(self) -> Result<()> {
        let socket = SocketAddr::new(self.ip, self.port);
        println!("Listening on {socket:?}");
        axum::Server::bind(&socket)
            .serve(http::app(self).into_make_service())
            .await?;

        Ok(())
    }
}

pub fn init_tracing() {
    if std::env::var("RUST_LOG_JSON").is_ok() {
        tracing_subscriber::fmt::fmt()
            .json()
            .with_env_filter(tracing_subscriber::EnvFilter::from_default_env())
            .init();
    } else {
        tracing_subscriber::fmt::init();
    }
}
