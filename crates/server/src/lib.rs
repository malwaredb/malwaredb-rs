pub mod db;

use std::net::IpAddr;
use std::time::SystemTime;

use anyhow::Result;
use zeroize::Zeroizing;

pub struct State {
    /// The port which will be used to listen for connections.
    pub port: u16,

    /// The directory to store malware samples, if we're keeping them.
    pub directory: Option<String>,

    /// The IP to use for listening for connections
    pub ip: IpAddr,

    /// Database connection string
    pub database_connection: Zeroizing<String>,

    /// Handle to the database connection
    pub db_type: db::DatabaseType,

    /// Start time of the server
    pub started: SystemTime,
}

impl State {
    pub fn new(port: u16, directory: Option<String>, ip: IpAddr, db_string: &str) -> Result<Self> {
        Ok(Self {
            port,
            directory,
            ip,
            database_connection: Zeroizing::new(db_string.into()),
            db_type: db::DatabaseType::from_string(db_string)?,
            started: SystemTime::now(),
        })
    }
}
