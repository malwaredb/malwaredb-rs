use crate::db;
use malwaredb_virustotal::VirusTotalClient;

use std::process::ExitCode;
use std::time::Duration;

use anyhow::Result;
use malwaredb_virustotal::filereport::FileReportRequestResponse;

/// Logic for getting records from the database and querying VirusTotal for AV hits
#[allow(dead_code)]
pub struct VtUpdater {
    pub(crate) inner: VirusTotalClient,

    /// Handle to the database connection
    pub db_type: db::DatabaseType,

    /// If we're allowed to upload samples to VirusTotal
    pub send_samples: bool,
}

impl VtUpdater {
    /// Fetch updates for all samples
    pub async fn execute(&self) -> Result<ExitCode> {
        // TODO: Figure out how to paginate over results
        if let Ok(hashes) = self.db_type.files_without_vt_records(1000).await {
            for hash in hashes {
                if let Ok(result) = self.inner.get_report(&hash).await {
                    if let FileReportRequestResponse::Data(data) = result {
                        self.db_type.store_vt_record(&data.attributes).await?;
                    }
                    tokio::time::sleep(Duration::from_secs(1)).await; // Don't overload VT
                }
            }
        }

        Ok(ExitCode::SUCCESS)
    }
}
