use crate::db;

use std::process::ExitCode;
use std::time::Duration;

use anyhow::Result;
use malwaredb_virustotal::VirusTotalClient;

/// Logic for getting records from the database and querying VirusTotal for AV hits
#[allow(dead_code)]
pub struct VtUpdater {
    pub(crate) inner: VirusTotalClient,

    /// Handle to the database connection
    pub db_type: db::DatabaseType,

    /// If we're allowed to upload samples to VirusTotal
    pub send_samples: bool,
}

impl VtUpdater {
    /// Fetch updates for all samples
    pub async fn execute(&self) -> Result<ExitCode> {
        // TODO: Figure out how to paginate over results
        // Don't paginate now since we don't have a mechanism to know when a file isn't in
        // VT, so we'll have an infinite loop.
        let hashes = self.db_type.files_without_vt_records(1000).await?;

        for hash in hashes {
            match self.inner.get_report(&hash).await {
                Ok(result) => {
                    self.db_type.store_vt_record(&result.attributes).await?;
                }
                Err(error) => eprintln!("Error: {error}"),
            }

            tokio::time::sleep(Duration::from_secs(2)).await; // Don't overload VT
        }

        Ok(ExitCode::SUCCESS)
    }
}
