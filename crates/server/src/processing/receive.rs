#![allow(unused)]

use crate::State;
use std::any::Any;
use types::KnownType;

use anyhow::Result;

pub async fn incoming_sample(
    data: Vec<u8>,
    uid: i32,
    sid: i32,
    file_name: Option<String>,
) -> Result<()> {
    let type_information = KnownType::new(&data)?;
    let state = State::get_state()?;
    let db_types = state.db_type.get_known_data_types().await?;

    let db_type = {
        let mut id = None;
        for db_type in db_types {
            for magic in db_type.magic {
                if data.starts_with(&magic) {
                    id = Some(db_type.id);
                }
            }
        }
        id
    };

    if db_type.is_none() {
        return Ok(());
    }

    let db_type = db_type.unwrap();

    state.store_bytes(&data)?;
    todo!()
}
