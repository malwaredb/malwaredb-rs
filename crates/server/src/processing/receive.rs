use crate::db::types::FileMetadata;
use crate::State;

use types::KnownType;

use anyhow::Result;

pub async fn incoming_sample(data: Vec<u8>, uid: i32, sid: i32, file_name: String) -> Result<()> {
    let known_type = KnownType::new(&data)?;
    let meta_data = FileMetadata::new(&data, file_name);
    let state = State::get_state()?;
    let db_file_types = state.db_type.get_known_data_types().await?;

    let db_file_type = {
        let mut id = None;
        for db_file_type in db_file_types {
            for magic in db_file_type.magic {
                if data.starts_with(&magic) {
                    id = Some(db_file_type.id);
                }
            }
        }
        id
    };

    if db_file_type.is_none() {
        return Ok(());
    }

    let db_file_type = db_file_type.unwrap();

    if state
        .db_type
        .add_file(&meta_data, known_type, uid, sid, db_file_type)
        .await?
    {
        state.store_bytes(&data)?;
    }

    Ok(())
}
