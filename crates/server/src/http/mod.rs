use super::State;
use api::{GetAPIKeyRequest, GetAPIKeyResponse, ServerInfo};

use std::sync::Arc;

use axum::http::StatusCode;
use axum::routing::{get, post};
use axum::{extract, Extension, Json, Router};
use tracing::debug;

pub fn app(state: State) -> Router {
    Router::new()
        .route("/", get(health))
        .route(api::SERVER_INFO, get(get_mdb_info))
        .route(api::USER_LOGIN_URL, post(user_login))
        .layer(Extension(Arc::new(state)))
}

async fn health() -> StatusCode {
    StatusCode::OK
}

async fn get_mdb_info(
    Extension(state): Extension<Arc<State>>,
) -> Result<Json<ServerInfo>, StatusCode> {
    let server_info = state
        .get_info()
        .await
        .map_err(|e| {
            debug!("API: ServerInfo Error: {e}");
            StatusCode::INTERNAL_SERVER_ERROR
        })
        .unwrap();
    Ok(Json(server_info))
}

#[axum_macros::debug_handler]
async fn user_login(
    Extension(state): Extension<Arc<State>>,
    extract::Json(payload): extract::Json<GetAPIKeyRequest>,
) -> Result<Json<GetAPIKeyResponse>, StatusCode> {
    let api_key = state
        .db_type
        .authenticate(&payload.user, &payload.password)
        .await
        .map_err(|e| {
            debug!("API: Authentication Error: {e}");
            StatusCode::UNAUTHORIZED
        })?;

    Ok(Json(GetAPIKeyResponse {
        key: Some(api_key),
        message: None,
    }))
}
