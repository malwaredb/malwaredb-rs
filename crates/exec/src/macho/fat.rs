use crate::macho::Macho;
use std::fmt::{Display, Formatter};
use types::KnownType;

const MAGIC: [u8; 4] = [0xCA, 0xFE, 0xBA, 0xBE];

#[derive(Clone, Debug)]
pub struct FatMacho<'a> {
    pub binaries: Vec<Macho<'a>>,
    pub has_overlay: Option<bool>,
    pub contents: &'a [u8],
}

impl<'a> KnownType for FatMacho<'a> {
    const MAGIC: &'static [u8] = &MAGIC;
}

impl<'a> Display for FatMacho<'a> {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        writeln!(
            f,
            "Fat Mach-O containing {} architectures:",
            self.binaries.len()
        )?;
        for bin in self.binaries.iter() {
            writeln!(f, "{bin}\n")?;
        }
        writeln!(f, "\tSize: {}", self.contents.len())
    }
}
