use crate::TypeMagic;

use std::fmt::{Display, Formatter};

use anyhow::Result;

const MAGIC: [u8; 4] = [0x25, 0x50, 0x44, 0x46]; // %PDF

#[derive(Clone, Debug)]
pub struct PDF<'a> {
    /// Version of the PDF spec
    pub version: Option<f32>,

    /// The array containing the raw bytes used to parse this program
    pub contents: &'a [u8],
}

impl<'a> PDF<'a> {
    pub fn from(contents: &'a [u8]) -> Result<Self> {
        let version = {
            if let Ok(ver) = std::str::from_utf8(&contents[5..8]) {
                ver.parse::<f32>().ok()
            } else {
                None
            }
        };

        Ok(Self { version, contents })
    }
}

impl<'a> TypeMagic for PDF<'a> {
    const MAGIC: &'static [&'static [u8]] = &[&MAGIC];
}

impl<'a> Display for PDF<'a> {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        write!(f, "PDF")?;
        if let Some(version) = self.version {
            write!(f, " version {version:.1}")?;
        }
        write!(f, " {} bytes", self.contents.len())
    }
}
