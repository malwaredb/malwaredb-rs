use anyhow::{bail, Context, Result};
use base64::engine::general_purpose;
use base64::Engine;
use home::home_dir;
use reqwest::StatusCode;
use serde::{Deserialize, Serialize};
use sha2::{Digest, Sha256};
use tracing::{error, warn};
use zeroize::Zeroize;

pub mod cli;

/// MalwareDB Client Configuration and connection
#[derive(Debug, Deserialize, Serialize, Zeroize)]
pub struct MdbClient {
    pub url: String,

    #[zeroize]
    pub(crate) api_key: String,
}

impl MdbClient {
    /// MDB Client from components since the key is private
    pub fn new(url: String, api_key: String) -> Self {
        Self { url, api_key }
    }

    /// MDB Client loaded from a specified path
    pub fn from_file(path: &std::path::PathBuf) -> Result<Self> {
        let config = std::fs::read_to_string(path)
            .context(format!("failed to read config file {}", path.display()))?;
        let cfg: MdbClient = toml::from_str(&config)
            .context(format!("failed to parse config file {}", path.display()))?;
        Ok(cfg)
    }

    /// MDB Client from user's home directory
    pub fn load() -> Result<Self> {
        if let Some(mut home_config) = home_dir() {
            home_config.push(".mdb_client.toml");
            if home_config.exists() {
                return Self::from_file(&home_config);
            }
        }
        bail!("config file not found")
    }

    /// Save MDB Client to the user's home directory
    pub fn save(&self) -> Result<()> {
        let toml = toml::to_string(self)?;
        if let Some(mut home_config) = home_dir() {
            home_config.push(".mdb_client.toml");
            std::fs::write(&home_config, toml).context(format!(
                "Unable to write config file at {}",
                &home_config.display()
            ))?;
            return Ok(());
        }
        std::fs::write("mdb_client.toml", toml).context("failed to read mdb config")
    }

    // Actions of the client

    /// Submit one file to MalwareDB: provide the contents, file name, and source ID
    pub async fn submit(&self, contents: &[u8], file_name: &str, source_id: u32) -> Result<bool> {
        let mut hasher = Sha256::new();
        hasher.update(contents);
        let result = hasher.finalize();

        let encoded = general_purpose::STANDARD.encode(contents);

        let payload = malwaredb_api::NewSample {
            file_name: file_name.into(),
            source_id,
            file_contents_b64: encoded,
            sha256: hex::encode(result),
        };

        let client = reqwest::Client::new();
        match client
            .post(format!("{}{}", self.url, malwaredb_api::UPLOAD_SAMPLE))
            .header(malwaredb_api::MDB_API_HEADER, &self.api_key)
            .json(&payload)
            .send()
            .await
        {
            Ok(res) => {
                if res.status() != StatusCode::OK {
                    warn!("Code {} sending {file_name}", res.status());
                }
                Ok(res.status() == StatusCode::OK)
            }
            Err(e) => {
                error!("Error sending {file_name}: {e}");
                bail!(e.to_string())
            }
        }
    }
}
