use crate::MdbClient;

use std::path::PathBuf;
use std::process::ExitCode;

use anyhow::Result;
use clap::Parser;

/// Retrieve a report for a sample from the server
/// The server will check that the user is part of a group
/// which is able to access the file's originating source.
#[derive(Parser, Clone, Debug, PartialEq)]
pub struct SampleReport {
    /// The hash of the file to retrieve
    pub hash: String,

    /// Save the report to disk, optional.
    pub output: Option<PathBuf>,
}

impl SampleReport {
    pub async fn exec(&self, config: &MdbClient) -> Result<ExitCode> {
        let _bytes = hex::decode(&self.hash)?;

        let report = config.report(&self.hash).await?;

        if let Some(output) = &self.output {
            let report = serde_json::to_string(&report)?;
            std::fs::write(output, report)?;
        } else {
            println!("{report}");
        }

        Ok(ExitCode::SUCCESS)
    }
}

#[test]
fn verify_cli() {
    use clap::CommandFactory;

    SampleReport::command().debug_assert();
}
