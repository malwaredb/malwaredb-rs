use crate::config::Config;

use std::path::PathBuf;
use std::process::ExitCode;

use anyhow::{Context, Result};
use clap::Parser;
use reqwest::StatusCode;

/// Retrieve a report for a sample from the server
/// The server will check that the user is part of a group
/// which is able to access the file's originating source.
#[derive(Parser, Clone, Debug, PartialEq)]
pub struct SampleReport {
    /// The hash of the file to retrieve
    pub hash: String,

    /// Save the report to disk, optional.
    pub output: Option<PathBuf>,
}

impl SampleReport {
    pub async fn exec(&self, config: &Config) -> Result<ExitCode> {
        let payload = malwaredb_api::DownloadSampleRequest {
            key: config.api_key.clone(),
            hash: malwaredb_api::HashType::try_from(self.hash.clone())
                .map_err(|_| {
                    eprintln!("Unknown hash type with size {}", self.hash.len());
                    ExitCode::FAILURE
                })
                .unwrap(),
        };

        let client = reqwest::Client::new();
        let res = client
            .post(format!("{}{}", config.url, malwaredb_api::SAMPLE_REPORT))
            .json(&payload)
            .send()
            .await?;

        if res.status() != StatusCode::OK {
            eprintln!("Received code {}", res.status());
            return Ok(ExitCode::FAILURE);
        }

        let body = res.bytes().await?;

        let json_response = String::from_utf8(body.to_ascii_lowercase())
            .context("failed to convert response to string")?;

        if let Some(output_path) = &self.output {
            match std::fs::write(output_path, &json_response) {
                Ok(_) => {}
                Err(e) => {
                    eprintln!("Error writing to {output_path:?}: {e}");
                    let report: malwaredb_api::Report = serde_json::from_str(&json_response)
                        .context("failed to convert json response to object")?;
                    println!("{report}");
                }
            }
        } else {
            let report: malwaredb_api::Report = serde_json::from_str(&json_response)
                .context("failed to convert json response to object")?;
            println!("{report}");
        }

        Ok(ExitCode::SUCCESS)
    }
}
