use crate::config::Config;

use std::path::PathBuf;
use std::process::ExitCode;

use anyhow::Result;
use base64::engine::general_purpose;
use base64::Engine;
use clap::{Parser, ValueHint};
use reqwest::StatusCode;
use sha2::{Digest, Sha256};
use walkdir::WalkDir;

/// Submit one or more samples to the server by source ID
#[derive(Parser, Clone, Debug, PartialEq)]
pub struct SubmitSamples {
    /// The source which is the origin for this file
    #[arg(short, long)]
    source_id: u32,

    /// Max depth, useful if there might be a recursive symlink
    #[arg(short, long, default_value = "100")]
    max_depth: usize,

    /// The file(s) to send, walking directories and following symlinks
    #[arg(value_name = "FILE", value_hint = ValueHint::FilePath)]
    files: Vec<PathBuf>,
}

impl SubmitSamples {
    pub async fn exec(&self, config: &Config) -> Result<ExitCode> {
        let mut counter = 0u32;
        for path in &self.files {
            if path.is_file() {
                if self.submit_file(config, path).await.is_ok() {
                    counter += 1;
                }
            } else if path.is_dir() {
                for entry in WalkDir::new(path)
                    .follow_links(true)
                    .max_depth(self.max_depth)
                    .into_iter()
                    .flatten()
                {
                    let entry = entry.path().to_path_buf();
                    if entry.is_file() && self.submit_file(config, &entry).await.is_ok() {
                        counter += 1;
                    }
                }
            }
        }

        println!("Submitted {counter} files.");

        Ok(ExitCode::SUCCESS)
    }

    async fn submit_file(&self, config: &Config, path: &PathBuf) -> Result<()> {
        let contents = std::fs::read(path)?;

        let mut hasher = Sha256::new();
        hasher.update(&contents);
        let result = hasher.finalize();

        let encoded = general_purpose::STANDARD.encode(&contents);
        let fname = path.file_name().unwrap().to_str().unwrap().to_string();

        let payload = api::NewSample {
            file_name: fname,
            key: config.api_key.clone(),
            source_id: self.source_id,
            file_contents_b64: encoded,
            sha256: hex::encode(result),
        };

        let client = reqwest::Client::new();
        let res = client
            .post(format!("{}{}", config.url, api::UPLOAD_SAMPLE))
            .json(&payload)
            .send()
            .await?;

        if res.status() != StatusCode::OK {
            eprintln!("Code {} submitting {path:?}", res.status());
        }
        Ok(())
    }
}
