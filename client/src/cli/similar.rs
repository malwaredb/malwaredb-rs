use crate::config::Config;
use malwaredb_types::exec::pe32::EXE;

use std::path::PathBuf;
use std::process::ExitCode;

use anyhow::Result;
use clap::{Parser, ValueHint};
use malwaredb_lzjd::{LZDict, Murmur3HashState};
use tlsh_fixed::TlshBuilder;

/// See if similar samples to a given sample are known to the server
#[derive(Parser, Clone, Debug, PartialEq)]
pub struct Similar {
    /// The file to send
    #[arg(value_hint = ValueHint::FilePath)]
    file: PathBuf,
}

impl Similar {
    pub async fn exec(&self, config: &Config) -> Result<ExitCode> {
        let contents = std::fs::read(&self.file)?;

        let mut hashes = vec![];
        if let Some(ssdeep_hash) = ssdeep::hash(&contents) {
            hashes.push((malwaredb_api::SimilarityHashType::SDHash, ssdeep_hash));
        }

        let build_hasher = Murmur3HashState::default();
        let lzjd_str =
            LZDict::from_bytes_stream(contents.iter().copied(), &build_hasher).to_string();
        hashes.push((malwaredb_api::SimilarityHashType::LZJD, lzjd_str));

        let mut builder = TlshBuilder::new(
            tlsh_fixed::BucketKind::Bucket256,
            tlsh_fixed::ChecksumKind::ThreeByte,
            tlsh_fixed::Version::Version4,
        );

        builder.update(&contents);

        if let Ok(hasher) = builder.build() {
            hashes.push((malwaredb_api::SimilarityHashType::TLSH, hasher.hash()));
        }

        if let Ok(exe) = EXE::from(&contents) {
            if let Some(imports) = exe.imports {
                hashes.push((
                    malwaredb_api::SimilarityHashType::ImportHash,
                    hex::encode(imports.hash()),
                ));
                hashes.push((
                    malwaredb_api::SimilarityHashType::FuzzyImportHash,
                    imports.fuzzy_hash(),
                ));
            }
        }

        let request = malwaredb_api::SimilarSamplesRequest {
            key: config.api_key.clone(),
            hash: hashes,
        };

        let client = reqwest::Client::new();
        let res = client
            .post(format!("{}{}", config.url, malwaredb_api::SIMILAR_SAMPLES))
            .json(&request)
            .send()
            .await?
            .json::<malwaredb_api::SimilarSamplesResponse>()
            .await?;

        if res.results.is_empty() {
            println!("No results.");
        } else {
            println!("Found {} similar files:", res.results.len());
            for result in res.results.iter() {
                println!("SHA-256: {}", result.sha256);
                for (sim_type, sim_score) in result.algorithms.iter() {
                    println!("\t{sim_type}, {sim_score:04}");
                }
            }
        }

        Ok(ExitCode::SUCCESS)
    }
}
