use crate::config::Config;

use std::process::ExitCode;

use anyhow::Result;
use clap::Parser;
use reqwest::StatusCode;

/// Retrieve a sample from the server
/// The server will check that the user is part of a group
/// which is able to access the file's originating source.
#[derive(Parser, Clone, Debug, PartialEq)]
pub struct RetrieveSample {
    /// The hash of the file to retrieve
    pub hash: String,

    /// Whether or not to download the sample wrapped in a CaRT file
    #[arg(long, action, default_value_t = false)]
    pub cart: bool,
}

impl RetrieveSample {
    pub async fn exec(&self, config: &Config) -> Result<ExitCode> {
        let (api_endpoint, file_name) = if self.cart {
            (
                format!("{}/{}", malwaredb_api::DOWNLOAD_SAMPLE_CART, self.hash),
                format!("{}.cart", self.hash),
            )
        } else {
            (
                format!("{}/{}", malwaredb_api::DOWNLOAD_SAMPLE, self.hash),
                self.hash.clone(),
            )
        };

        let client = reqwest::Client::new();
        let res = client
            .get(format!("{}{}", config.url, api_endpoint))
            .header(malwaredb_api::MDB_API_HEADER, &config.api_key)
            .send()
            .await?;

        if res.status() != StatusCode::OK {
            eprintln!("Received code {}", res.status());
            return Ok(ExitCode::FAILURE);
        }

        let body = res.bytes().await?;
        std::fs::write(&file_name, body)?;

        Ok(ExitCode::SUCCESS)
    }
}
