use crate::config::Config;

use std::process::ExitCode;

use anyhow::Result;
use clap::Parser;
use reqwest::StatusCode;

/// Retrieve a sample from the server
/// The server will check that the user is part of a group
/// which is able to access the file's originating source.
#[derive(Parser, Clone, Debug, PartialEq)]
pub struct RetrieveSample {
    /// The hash of the file to retrieve
    pub hash: String,
}

impl RetrieveSample {
    pub async fn exec(&self, config: &Config) -> Result<ExitCode> {
        let payload = api::DownloadSampleRequest {
            key: config.api_key.clone(),
            hash: api::HashType::try_from(self.hash.clone())
                .map_err(|_| {
                    eprintln!("Unknown hash type with size {}", self.hash.len());
                    ExitCode::FAILURE
                })
                .unwrap(),
        };

        let client = reqwest::Client::new();
        let res = client
            .post(format!("{}{}", config.url, api::DOWNLOAD_SAMPLE))
            .json(&payload)
            .send()
            .await?;

        if res.status() != StatusCode::OK {
            eprintln!("Received code {}", res.status());
            return Ok(ExitCode::FAILURE);
        }

        let body = res.bytes().await?;
        std::fs::write(&self.hash, body.to_vec())?;

        Ok(ExitCode::SUCCESS)
    }
}
