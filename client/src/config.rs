use anyhow::{bail, Context};
use home::home_dir;
use serde::{Deserialize, Serialize};
use zeroize::Zeroize;

#[derive(Debug, Deserialize, Serialize, Zeroize)]
pub struct Config {
    pub url: String,
    #[zeroize]
    pub api_key: String,
}

impl Config {
    pub fn load() -> anyhow::Result<Self> {
        if let Some(mut home_config) = home_dir() {
            home_config.push(".mdb_client.toml");
            if home_config.exists() {
                return Self::from_file(&home_config);
            }
        }
        bail!("config file not found")
    }

    pub fn save(&self) -> anyhow::Result<()> {
        let toml = toml::to_string(self)?;
        if let Some(mut home_config) = home_dir() {
            home_config.push(".mdb_client.toml");
            std::fs::write(&home_config, toml).context(format!(
                "Unable to write config file at {}",
                &home_config.display()
            ))?;
            return Ok(());
        }
        std::fs::write("mdb_client.toml", toml)
            .context("Unable to write config file at in current directory")
    }

    pub fn from_file(path: &std::path::PathBuf) -> anyhow::Result<Self> {
        let config = std::fs::read_to_string(path)
            .context(format!("failed to read config file {}", path.display()))?;
        let cfg: Config = toml::from_str(&config)
            .context(format!("failed to parse config file {}", path.display()))?;
        Ok(cfg)
    }
}
