use std::path::PathBuf;

use reqwest::Certificate;
use serde::de::Error;
use serde::{self, Deserialize, Deserializer, Serializer};

pub fn serialize<S>(cert_path: &Option<(Certificate, PathBuf)>, s: S) -> Result<S::Ok, S::Error>
where
    S: Serializer,
{
    if let Some((_, path)) = cert_path {
        return s.serialize_str(path.to_str().expect("path contains invalid UTF-8"));
    }
    s.serialize_none()
}

pub fn deserialize<'de, D>(deserializer: D) -> Result<Option<(Certificate, PathBuf)>, D::Error>
where
    D: Deserializer<'de>,
{
    let s: Option<PathBuf> = Option::deserialize(deserializer)?;
    if let Some(s) = s {
        let cert = crate::path_load_cert(&s).map_err(|e| D::Error::custom(e.to_string()))?;
        return Ok(Some((cert, s)));
    }

    Ok(None)
}
