use malwaredb_server::State;

use std::process::ExitCode;

use clap::{Args, Subcommand};

/// Show (or toggle) the state of MalwareDB storing incoming files with gzip compression
#[derive(Clone, Debug, Args, PartialEq)]
pub struct Compression {
    /// Optionally enable or disable compression
    #[clap(subcommand)]
    option: Option<Options>,
}

#[derive(Clone, Debug, Subcommand, PartialEq, Eq)]
enum Options {
    /// Specifies that incoming files should be gzip-compressed on disk. Does not compress
    /// files already in MalwareDB.
    Enable,

    /// Clears the compression flag, does not decompress already compressed files.
    Disable,
}

impl Compression {
    pub async fn execute(&self, state: State) -> anyhow::Result<ExitCode> {
        match self.option {
            None => {
                let compression_state = if state.db_config.compression {
                    "enabled"
                } else {
                    "disabled"
                };
                println!("Compression {compression_state}");
            }
            Some(Options::Enable) => {
                state.db_type.enable_compression().await?;
                println!("Compression flag set.");
            }
            Some(Options::Disable) => {
                state.db_type.enable_compression().await?;
                println!("Compression flag unset.");
            }
        }
        Ok(ExitCode::SUCCESS)
    }
}
