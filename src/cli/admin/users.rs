use super::super::config::Config;
use server::db::DatabaseConnection;

use std::process::ExitCode;

use clap::Parser;
use dialoguer::Password;

#[derive(Clone, Debug, Parser, PartialEq)]
pub struct Create {
    /// Username
    #[arg(short, long)]
    pub uname: String,

    /// Email address
    #[arg(short, long)]
    pub email: String,

    /// First name
    #[arg(short, long)]
    pub fname: String,

    /// Last name
    #[arg(short, long)]
    pub lname: String,

    /// Organisation
    #[arg(short, long)]
    pub org: Option<String>,

    /// Prompt for the user's password (or leave empty)
    #[arg(short, long, default_value = "false")]
    pub password: bool,
}

impl Create {
    pub fn execute(&self, config: &Config) -> anyhow::Result<ExitCode> {
        let password = if self.password {
            let password = Password::new()
                .with_prompt(format!("New Password for {}", self.uname))
                .with_confirmation("Confirm password", "Passwords mismatching")
                .interact()?;
            Some(password)
        } else {
            None
        };

        let mut state = config.state()?;
        state.db_type.create_user(
            &self.uname,
            &self.fname,
            &self.lname,
            &self.email,
            password,
            self.org.clone(),
        )?;

        Ok(ExitCode::SUCCESS)
    }
}
