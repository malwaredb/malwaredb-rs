mod users;
use super::run::Run;

use std::process::ExitCode;

use anyhow::Context;
use clap::{Args, Parser, Subcommand};
use confargs::{prefix_char_filter, Toml};

/// Administrative Options for Malware Database Server
#[derive(Clone, Debug, Args, PartialEq)]
pub struct Admin {
    /// Config file, needed for the database connection information
    pub config_file: String,

    /// Administrative subcommands
    #[clap(subcommand)]
    pub action: AdminActions,
}

impl Admin {
    pub fn execute(&self) -> anyhow::Result<ExitCode> {
        let args = confargs::args::<Toml>(prefix_char_filter::<'@'>)
            .context("Failed to parse config")
            .map(Run::parse_from)?;
        match &self.action {
            AdminActions::CreateUser(cmd) => cmd.execute(&args),
        }
    }
}

#[derive(Clone, Subcommand, Debug, PartialEq)]
pub enum AdminActions {
    CreateUser(users::Create),
}
