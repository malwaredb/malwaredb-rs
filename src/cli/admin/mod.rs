mod users;
use super::config::Config;

use std::process::ExitCode;

use clap::{Args, Subcommand};

/// Administrative Options for Malware Database Server
#[derive(Clone, Debug, Args, PartialEq)]
pub struct Admin {
    /// Config file, needed for the database connection information
    #[arg(short = 'c', value_name = "FILE", value_hint = clap::ValueHint::FilePath)]
    pub config_file: std::path::PathBuf,

    /// Administrative subcommands
    #[clap(subcommand)]
    pub action: AdminActions,
}

impl Admin {
    pub fn execute(&self) -> anyhow::Result<ExitCode> {
        let cfg = Config::from_file(&self.config_file)?;
        match &self.action {
            AdminActions::CreateUser(cmd) => cmd.execute(&cfg),
            AdminActions::ClearAPIKeys(cmd) => cmd.execute(&cfg),
            AdminActions::ResetPassword(cmd) => cmd.execute(&cfg),
        }
    }
}

#[derive(Clone, Subcommand, Debug, PartialEq)]
pub enum AdminActions {
    CreateUser(users::Create),
    ClearAPIKeys(users::ResetAPIKeys),
    ResetPassword(users::ResetPassword),
}
