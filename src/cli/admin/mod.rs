mod groups;
mod sources;
mod users;
use super::config::Config;

use std::process::ExitCode;

use clap::{Args, Subcommand};

/// Administrative Options for Malware Database Server
#[derive(Clone, Debug, Args, PartialEq)]
pub struct Admin {
    /// Config file, needed for the database connection information
    #[arg(short = 'c', value_name = "FILE", value_hint = clap::ValueHint::FilePath)]
    pub config_file: std::path::PathBuf,

    /// Administrative subcommands
    #[clap(subcommand)]
    pub action: AdminActions,
}

impl Admin {
    pub async fn execute(&self) -> anyhow::Result<ExitCode> {
        let cfg = Config::from_file(&self.config_file)?;
        match &self.action {
            AdminActions::CreateUser(cmd) => cmd.execute(&cfg).await,
            AdminActions::ListUsers => {
                let state = cfg.state().await?;
                for user in state.db_type.list_users().await? {
                    println!("{user}");
                }
                Ok(ExitCode::SUCCESS)
            }
            AdminActions::ListGroups => {
                let state = cfg.state().await?;
                for group in state.db_type.list_groups().await? {
                    println!("{group}");
                }
                Ok(ExitCode::SUCCESS)
            }
            AdminActions::CreateGroup(cmd) => cmd.execute(&cfg).await,
            AdminActions::ClearAPIKeys(cmd) => cmd.execute(&cfg).await,
            AdminActions::ResetPassword(cmd) => cmd.execute(&cfg).await,
            AdminActions::CreateSource(cmd) => cmd.execute(&cfg).await,
            AdminActions::ListSources => {
                let state = cfg.state().await?;
                for source in state.db_type.list_sources().await? {
                    println!("{source}");
                }
                Ok(ExitCode::SUCCESS)
            }
        }
    }
}

#[derive(Clone, Subcommand, Debug, PartialEq)]
pub enum AdminActions {
    #[command(visible_alias = "hint")]
    CreateUser(users::Create),
    /// List users
    ListUsers,
    /// List groups
    ListGroups,
    CreateGroup(groups::Create),
    ClearAPIKeys(users::ResetAPIKeys),
    ResetPassword(users::ResetPassword),
    CreateSource(sources::Create),
    /// List sources
    ListSources,
}
