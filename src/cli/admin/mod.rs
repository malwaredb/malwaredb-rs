mod groups;
mod load;
mod sources;
mod users;
use super::config::Config;

use std::process::ExitCode;

use clap::{Args, Subcommand, ValueHint};

/// Administrative Options for Malware Database Server
#[derive(Clone, Debug, Args, PartialEq)]
pub struct Admin {
    /// Config file, needed for the database connection information
    #[arg(short = 'c', value_name = "FILE", value_hint = ValueHint::FilePath)]
    pub config_file: std::path::PathBuf,

    /// Administrative subcommands
    #[clap(subcommand)]
    pub action: AdminActions,
}

impl Admin {
    pub async fn execute(&self) -> anyhow::Result<ExitCode> {
        let cfg = Config::from_file(&self.config_file)?;
        match &self.action {
            AdminActions::CreateUser(cmd) => cmd.execute(&cfg).await,
            AdminActions::CreateGroup(cmd) => cmd.execute(&cfg).await,
            AdminActions::AddUserToGroup(cmd) => cmd.execute(&cfg).await,
            AdminActions::ClearAPIKeys(cmd) => cmd.execute(&cfg).await,
            AdminActions::ResetPassword(cmd) => cmd.execute(&cfg).await,
            AdminActions::CreateSource(cmd) => cmd.execute(&cfg).await,
            AdminActions::AddGroupToSource(cmd) => cmd.execute(&cfg).await,
            AdminActions::BulkAdd(cmd) => cmd.execute(&cfg).await,
            AdminActions::List(sub) => sub.execute(&cfg).await,
        }
    }
}

#[derive(Clone, Subcommand, Debug, PartialEq)]
pub enum AdminActions {
    #[command(visible_alias = "hint")]
    CreateUser(users::Create),
    CreateGroup(groups::Create),
    AddUserToGroup(groups::AddUser),
    ClearAPIKeys(users::ResetAPIKeys),
    ResetPassword(users::ResetPassword),
    CreateSource(sources::Create),
    AddGroupToSource(sources::AddGroup),

    /// Bulk load files
    BulkAdd(load::Load),

    /// List users, groups, sources
    #[clap(subcommand)]
    List(ListActions),
}

#[derive(Clone, Subcommand, Debug, PartialEq)]
pub enum ListActions {
    /// List users
    Users(users::List),
    /// List groups
    Groups(groups::List),
    /// List sources
    Sources(sources::List),
    /// List types
    Types,
}

impl ListActions {
    pub async fn execute(&self, cfg: &Config) -> anyhow::Result<ExitCode> {
        match self {
            ListActions::Users(cmd) => cmd.execute(cfg).await,
            ListActions::Groups(cmd) => cmd.execute(cfg).await,
            ListActions::Sources(cmd) => cmd.execute(cfg).await,
            ListActions::Types => {
                let state = cfg.state().await?;
                for data_type in state.db_type.get_known_data_types().await? {
                    print!("{}", data_type.name);
                    if let Some(desc) = data_type.description {
                        print!(" {desc}");
                    }
                    if data_type.executable {
                        print!(" -- is executable");
                    }
                    println!();
                    for magic in data_type.magic {
                        println!("\t{}", hex::encode(magic));
                    }
                }
                Ok(ExitCode::SUCCESS)
            }
        }
    }
}
