use super::super::config::Config;

use std::process::ExitCode;

use clap::{Parser, ValueHint};

/// Create a new group
#[derive(Clone, Debug, Parser, PartialEq)]
pub struct Create {
    /// Name
    #[arg(short, long, value_hint = ValueHint::Username)]
    pub name: String,

    /// Description
    #[arg(short, long, value_hint = ValueHint::EmailAddress)]
    pub description: String,

    /// Parent group
    #[arg(short, long, value_hint = ValueHint::Unknown)]
    pub parent: Option<i32>,
}

impl Create {
    pub async fn execute(&self, config: &Config) -> anyhow::Result<ExitCode> {
        let state = config.state().await?;

        let gid = state
            .db_type
            .create_group(&self.name, &self.description, self.parent)
            .await?;

        println!("Created group {} with ID: {gid}.", self.name);

        Ok(ExitCode::SUCCESS)
    }
}
