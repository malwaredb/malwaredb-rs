use crate::cli::config::{Config, CONFIG_PATHS};

use std::fs;
use std::path::PathBuf;
use std::process::ExitCode;

use clap::Args;

#[derive(Clone, Debug, Args, PartialEq)]
pub struct CreateDefaultConfig {
    /// Specify path (or a default path is used)
    path: Option<PathBuf>,
}

impl CreateDefaultConfig {
    pub fn execute(&self) -> anyhow::Result<ExitCode> {
        let config = Config::default();
        let config = toml::to_string(&config)?;

        let config_path = if let Some(config_path) = &self.path {
            config_path.clone()
        } else {
            #[cfg(target_os = "freebsd")]
            let config_path = PathBuf::from(CONFIG_PATHS[1]);

            #[cfg(not(target_os = "freebsd"))]
            let config_path = PathBuf::from(CONFIG_PATHS[0]);

            config_path
        };

        let config_parent_dir = config_path.parent().unwrap();
        fs::create_dir_all(config_parent_dir).unwrap_or_else(|_| {
            panic!("failed to create parent directory {config_parent_dir:?} for the config file")
        });

        fs::write(&config_path, config)
            .unwrap_or_else(|_| panic!("failed to write config file to {config_path:?}"));

        Ok(ExitCode::SUCCESS)
    }
}
