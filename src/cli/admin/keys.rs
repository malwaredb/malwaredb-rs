use crate::cli::config::Config;
use malwaredb_server::crypto::FileEncryption;

use std::fmt::{Display, Formatter};
use std::process::ExitCode;

use anyhow::Result;
use clap::{Parser, ValueEnum};

#[derive(Debug, Clone, Copy, Eq, PartialEq, ValueEnum)]
enum KeyType {
    Aes128,
    Rc4,
    Xor,
}

impl Display for KeyType {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        match self {
            KeyType::Aes128 => write!(f, "aes128"),
            KeyType::Rc4 => write!(f, "rc4"),
            KeyType::Xor => write!(f, "xor"),
        }
    }
}

/// Create a key for file encryption
#[derive(Clone, Debug, Parser, Eq, PartialEq)]
pub struct Create {
    #[arg(long = "type")]
    key_type: KeyType,
}

impl Create {
    pub async fn execute(&self, config: &Config) -> Result<ExitCode> {
        let state = config.state().await?;
        let key = FileEncryption::random(&self.key_type.to_string())?;
        let id = state.db_type.add_file_encryption_key(&key).await?;
        println!("Added {} key {id}", self.key_type);
        Ok(ExitCode::SUCCESS)
    }
}

#[derive(Clone, Debug, Parser, Eq, PartialEq)]
pub struct List {}

impl List {
    pub async fn execute(&self, config: &Config) -> Result<ExitCode> {
        let state = config.state().await?;
        let keys = state.db_type.get_encryption_key_names_ids().await?;

        for (key_id, key_algo) in keys {
            println!("{key_id}: {key_algo}");
        }

        Ok(ExitCode::SUCCESS)
    }
}
