use super::Installer;

use std::process::ExitCode;

use clap::Parser;

const LAUNCH_PATH: &str = "/Library/LaunchDaemons/malwaredb.plist";

/// Install MalwareDB as a system service
#[derive(Parser, Debug, Clone, PartialEq)]
pub struct Install {
    /// Use custom configuration file path
    pub config: Option<String>,
}

impl Install {
    pub(crate) fn gen_config(&self) -> String {
        let exec = std::env::current_exe().unwrap();
        let exec = exec.to_str().unwrap();

        let optional_config = if let Some(config) = &self.config {
            format!(
                "\
        <string>load</string>\
        <string>{config}</string>\
        "
            )
        } else {
            "".to_string()
        };

        format!(
            "<?xml version='1.0' encoding='UTF-8'?>\
<!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\"\
\"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\
<plist version='1.0'>\
	<dict>\
		<key>EnvironmentVariables</key>\
		<dict>\
			<key>SERVICE_RUN_MODE</key>\
			<string>1</string>\
		</dict>\
		<key>Label</key>\
		<string>nextdns</string>\
		<key>ProgramArguments</key>\
		<array>\
			<string>{exec}</string>\
			<string>run</string>{optional_config}\
		</array>\
		<key>KeepAlive</key>\
		<true/>\
		<key>Disabled</key>\
		<false/>\
	</dict>\
</plist>\
",
        )
    }
}

impl Installer for Install {
    fn do_install(&self) -> anyhow::Result<ExitCode> {
        let config = self.gen_config();
        std::fs::write(LAUNCH_PATH, config)?;
        Ok(ExitCode::SUCCESS)
    }
}
