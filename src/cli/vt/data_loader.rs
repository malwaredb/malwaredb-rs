use crate::cli::config::Config;
use malwaredb_server::vt::VtUpdater;

use std::path::PathBuf;
use std::process::ExitCode;

use anyhow::Context;
use clap::Parser;
use malwaredb_virustotal::filereport::FileReportData;

#[derive(Parser, Clone, Debug)]
pub struct DataLoader {
    /// VirusTotal Report
    #[arg(short, long)]
    pub report: PathBuf,

    /// Configuration for VirusTotal
    #[clap(subcommand)]
    cmd: Option<super::VtConfig>,
}

impl DataLoader {
    pub async fn execute(self) -> anyhow::Result<ExitCode> {
        let report =
            std::fs::read_to_string(&self.report).context("failed to read VT report file")?;
        let report: FileReportData =
            toml::from_str(&report).context("failed to parse VT report")?;

        let cfg = match self.cmd {
            Some(config) => config.config()?,
            None => Config::from_found_files()?,
        };

        let updater: VtUpdater = cfg.state().await?.try_into()?;
        updater.loader(&report).await?;

        Ok(ExitCode::SUCCESS)
    }
}
