use super::config::Config;

use std::process::ExitCode;

use anyhow::Result;
use clap::{Parser, Subcommand};

#[derive(Parser, Clone, Debug, PartialEq)]
pub struct VtUpdaterRun {
    #[clap(subcommand)]
    cmd: Option<VtUpdaterSubcommands>,
}

impl VtUpdaterRun {
    pub async fn execute(&self) -> Result<ExitCode> {
        let cfg = match &self.cmd {
            Some(VtUpdaterSubcommands::Load(loader)) => loader.config()?,
            Some(VtUpdaterSubcommands::Config(config)) => config.clone(),
            None => Config::from_found_files()?,
        };

        if let Some(updater) = cfg.state().await?.vt_updater() {
            updater.execute().await
        } else {
            eprintln!("VT API key not provided!");
            Ok(ExitCode::FAILURE)
        }
    }
}

#[derive(Subcommand, Clone, Debug, PartialEq)]
enum VtUpdaterSubcommands {
    Load(Load),
    Config(Config),
}

#[derive(Clone, Parser, Debug, PartialEq)]
struct Load {
    #[arg(value_name = "FILE", value_hint = clap::ValueHint::FilePath)]
    pub file: std::path::PathBuf,
}

impl Load {
    fn config(&self) -> anyhow::Result<Config> {
        Config::from_file(&self.file)
    }
}
