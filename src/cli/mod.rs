//! How to generate shell completions.
//! Instructions based on [Clap](https://github.com/clap-rs/clap/blob/master/clap_complete/examples/completion-derive.rs).
//!
//! Usage with zsh:
//! ```console
//! $ cargo run --features=admin --bin mdb_server -- --generate=zsh > /usr/local/share/zsh/site-functions/_completion_derive
//! $ compinit
//! $ ./target/debug/mdb_server --<TAB>
//! ```
//! fish:
//! ```console
//! $ cargo run --features=admin --bin mdb_server -- --generate=fish > completion_derive.fish
//! $ . ./completion_derive.fish
//! $ ./target/debug/mdb_server --<TAB>
//! ```
//! bash:
//! ```console
//! $ cargo run --features=admin --bin mdb_server -- --generate=bash > completion_derive.bash
//! $ source completion_derive.bash
//! $ ./target/debug/mdb_server --<TAB>
//! ```

#[cfg(feature = "admin")]
mod admin;
pub(crate) mod config;
mod run;
#[cfg(not(target_family = "windows"))]
mod service;
#[cfg(feature = "vt")]
mod vt;

#[cfg(feature = "admin-gui")]
use crate::gui;
#[cfg(not(target_family = "windows"))]
use service::{Install, Installer};

use std::process::ExitCode;

use clap::{Command, Parser, Subcommand};
use clap_complete::{generate, Generator, Shell};

pub const VERSION: &str = concat!(
    "v",
    env!("CARGO_PKG_VERSION"),
    "-",
    env!("VERGEN_GIT_DESCRIBE"),
    " ",
    env!("VERGEN_BUILD_DATE")
);

/// Malware Database
///
/// Malware Database maintains the bookkeeping for unknown, malicious, and benign binaries
/// using a database, and optionally storing the files in a given location for later retrieval.
#[derive(Parser, Debug, Clone, PartialEq)]
#[command(author, about, version = VERSION)]
pub struct Options {
    #[arg(long = "generate", value_enum)]
    pub(crate) generator: Option<Shell>,
    /// Subcommands (with their own options)
    #[clap(subcommand)]
    cmd: Option<Subcommands>,
}

impl Options {
    pub async fn execute(self) -> anyhow::Result<ExitCode> {
        match self.cmd {
            Some(Subcommands::Run(cmd)) => cmd.execute().await,
            #[cfg(feature = "admin")]
            Some(Subcommands::Admin(cmd)) => cmd.execute().await,
            #[cfg(feature = "admin-gui")]
            Some(Subcommands::AdminGui(cmd)) => cmd.execute().await,
            #[cfg(not(target_family = "windows"))]
            Some(Subcommands::InstallService(install)) => install.do_install(),
            #[cfg(feature = "vt")]
            Some(Subcommands::Vt(cmd)) => cmd.execute().await,
            None => {
                eprintln!("Please run with `--help` for options.");
                Ok(ExitCode::FAILURE)
            }
        }
    }
}

#[derive(Subcommand, Clone, Debug, PartialEq)]
enum Subcommands {
    #[command(visible_alias = "hint")]
    Run(run::Run),
    #[cfg(feature = "admin")]
    Admin(admin::Admin),
    #[cfg(feature = "admin-gui")]
    AdminGui(gui::AdminGui),
    #[cfg(not(target_family = "windows"))]
    /// Register MalwareDB as a system service
    InstallService(Install),
    /// Run a VT update agent which exits when finished
    #[cfg(feature = "vt")]
    Vt(vt::VtUpdaterRun),
}

pub fn print_completions<G: Generator>(gen: G, cmd: &mut Command) {
    generate(gen, cmd, cmd.get_name().to_string(), &mut std::io::stdout());
}

#[cfg(test)]
mod tests {
    use super::Options;

    use clap::CommandFactory;

    #[test]
    fn verify_cli() {
        Options::command().debug_assert();
    }
}
