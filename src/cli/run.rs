use server::State;

use std::fmt::{Debug, Formatter};
use std::net::IpAddr;
use std::process::ExitCode;

use anyhow::{anyhow, Context};
use clap::Parser;
use confargs::{prefix_char_filter, Toml};
use zeroize::Zeroizing;

/// Malware Database Server
#[derive(Clone, Parser, PartialEq)]
pub struct Run {
    /// The port which will be used to listen for connections.
    #[arg(short, long, default_value = "8443")]
    port: u16,

    /// The directory to store malware samples, if we're keeping them.
    #[arg(long)]
    dir: Option<String>,

    /// IP address to use for listening for connections
    #[arg(short, long, default_value = "127.0.0.1")]
    ip: IpAddr,

    /// Database connection string
    #[arg(long)]
    db: Option<Zeroizing<String>>,
}

impl Run {
    pub fn execute(&self) -> anyhow::Result<ExitCode> {
        let args = confargs::args::<Toml>(prefix_char_filter::<'@'>)
            .context("Failed to parse config")
            .map(Run::parse_from)?;
        let _state = match (args.port, args.dir, args.ip, args.db) {
            (port, dir, ip, Some(db)) => State::new(port, dir, ip, &db)?,
            _ => {
                eprintln!("Specify the port number with `--port` and database string with `--db`.\nOptionally specify the storage directory with `--dir`.\n\nRun with `--help` for more information.");
                return Err(anyhow!("invalid configuration"));
            }
        };
        println!("Hello, world!");
        Ok(ExitCode::SUCCESS)
    }
}

impl Debug for Run {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        write!(f, "MalwareDB listening on {}:{}", self.ip, self.port)?;
        match &self.dir {
            Some(dir) => write!(f, ", saving samples to {dir}"),
            None => write!(f, ", not saving samples"),
        }
    }
}
