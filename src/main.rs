use server::State;

use std::net::IpAddr;

use anyhow::{anyhow, Context};
use clap::Parser;
use confargs::{prefix_char_filter, Toml};
use zeroize::Zeroizing;

/// Malware Database Server
#[derive(Clone, Parser, PartialEq)]
#[command(author, version, about)]
struct Args {
    /// The port which will be used to listen for connections.
    #[arg(short, long, default_value = "8443")]
    port: u16,

    /// The directory to store malware samples, if we're keeping them.
    #[arg(long)]
    dir: Option<String>,

    /// IP address to use for listening for connections
    #[arg(short, long, default_value = "127.0.0.1")]
    ip: IpAddr,

    /// Database connection string
    #[arg(long)]
    db: Option<Zeroizing<String>>,
}

fn main() -> anyhow::Result<()> {
    let args = confargs::args::<Toml>(prefix_char_filter::<'@'>)
        .context("Failed to parse config")
        .map(Args::parse_from)?;
    let _state = match (args.port, args.dir, args.ip, args.db) {
        (port, dir, ip, Some(db)) => State::new(port, dir, ip, &db)?,
        _ => {
            eprintln!("Specify the port number with `--port` and database string with `--db`.\nOptionally specify the storage directory with `--dir`.\n\nRun with `--help` for more information.");
            return Err(anyhow!("invalid configuration"));
        }
    };
    println!("Hello, world!");
    Ok(())
}
