#![doc = include_str!("../README.md")]
#![deny(missing_docs)]
#![deny(clippy::all)]
#![deny(clippy::cargo)]

pub(crate) mod cli;
#[cfg(feature = "admin-gui")]
pub(crate) mod gui;

use std::process::ExitCode;

use clap::Parser;
use tracing_subscriber::filter::{filter_fn, FilterExt};
use tracing_subscriber::fmt::format::FmtSpan;
use tracing_subscriber::{prelude::*, EnvFilter};

/// MDB version
pub const MDB_VERSION: &str = env!("CARGO_PKG_VERSION");

#[tokio::main]
async fn main() -> anyhow::Result<ExitCode> {
    let app = cli::Options::parse();

    let env_filter =
        EnvFilter::builder().parse_lossy(app.logger.log_filter.as_ref().unwrap_or(&"".to_owned()));

    let target_filter = filter_fn(|meta| {
        let target = meta.target();
        [
            "malwaredb",
            "malwaredb_server",
            "malwaredb_types",
            "deadpool_postgres",
            "postgres",
            #[cfg(feature = "sqlite")]
            "rusqlite",
        ]
        .into_iter()
        .any(|name| target.eq(name) || target.starts_with(&format!("{name}::")))
    });
    let log_filter = env_filter.and(target_filter);

    let fmt_layer = tracing_subscriber::fmt::layer()
        .pretty()
        .with_writer(move || -> Box<dyn std::io::Write> {
            match app.logger.log_target {
                cli::LogTarget::Stdout => Box::new(std::io::stdout()),
                cli::LogTarget::Stderr => Box::new(std::io::stderr()),
            }
        })
        .with_span_events(FmtSpan::NEW | FmtSpan::CLOSE)
        .with_filter(log_filter);

    tracing_subscriber::registry().with(fmt_layer).init();
    app.execute().await
}
